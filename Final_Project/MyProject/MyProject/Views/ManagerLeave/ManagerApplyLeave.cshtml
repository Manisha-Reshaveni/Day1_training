@model MyProject.Models.ManagerLeave

@{ ViewBag.Title = "Apply Leave"; }
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>

        body {
            background: linear-gradient(120deg, #185a9d, #43cea2);
            color: #fff;
            font-family: 'Roboto', sans-serif;
            text-align: center;
            padding: 50px;
        }

        .form-container {
            background-color: #2a2a72;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
            padding: 30px;
            margin: auto;
            max-width: 600px;
        }

        label {
            font-weight: bold;
        }

        .form-control {
            border-radius: 5px;
        }

        .btn-primary {
            background-color: #43cea2;
            border: none;
        }

            .btn-primary:hover {
                background-color: #185a9d;
            }

        .text-danger {
            font-size: 0.9em;
        }

        .back-button {
            position: absolute;
            top: 10px;
            left: 10px;
            w background-color: #43cea2;
            padding: 10px 15px;
            border-radius: 5px;
            color: #040D12;
            text-decoration: none;
        }

            .back-button:hover {
                background-color: #185a9d;
            }
    </style>
</head>
<body>
    <a href="@Url.Action("ManagerDashboard", "Project")" class="back-button">Back</a>
    <h2>Apply Leave</h2>

    @using (Html.BeginForm("ManagerApplyLeave", "ManagerLeave", FormMethod.Post, new { @class = "form-container" }))

    {

@Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">

                    @Html.LabelFor(model => model.LeaveType)

                    @Html.DropDownListFor(model => model.LeaveType, new SelectList(new[] { "Select Leave Type", "Adoption Leave", "Bereavement Leave", "Casual / Sick Leave", "LOP", "Maternity Leave", "Miscarriage Leave", "Privilege Leave" }, "Select Leave Type"), new { @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.LeaveType, "", new { @class = "text-danger" })
                </div>
                                <div class="form-group">

                                    @Html.LabelFor(model => model.FromDate)

                                    @Html.TextBoxFor(model => model.FromDate, new { @class = "form-control", type = "date", id = "FromDate" })

                                    @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger" })
                                </div>
                                                <div class="form-group">

                                                    @Html.LabelFor(model => model.ToDate)

                                                    @Html.TextBoxFor(model => model.ToDate, new { @class = "form-control", type = "date", id = "ToDate" })

                                                    @Html.ValidationMessageFor(model => model.ToDate, "", new { @class = "text-danger" })
                                                </div>
                                                                <div class="form-group">

                                                                    @Html.LabelFor(model => model.DaysOfLeave)

                                                                    @Html.TextBoxFor(model => model.DaysOfLeave, new { @class = "form-control", id = "DaysOfLeave", @readonly = "readonly" })

                                                                    @Html.ValidationMessageFor(model => model.DaysOfLeave, "", new { @class = "text-danger" })
                                                                </div>
                                                                                <div class="form-group">

                                                                                    @Html.LabelFor(model => model.Reason)

                                                                                    @Html.TextAreaFor(model => model.Reason, new { @class = "form-control", rows = "4" })

                                                                                    @Html.ValidationMessageFor(model => model.Reason, "", new { @class = "text-danger" })
                                                                                </div>
                                                                                                <button type="submit" class="btn btn-primary btn-block">Submit</button>}
    <script>

        document.getElementById("FromDate").addEventListener("change", calculateDays);

        document.getElementById("ToDate").addEventListener("change", calculateDays);

        function calculateDays() {

            const fromDate = new Date(document.getElementById("FromDate").value);

            const toDate = new Date(document.getElementById("ToDate").value);

            const holidays = [

                new Date(new Date().getFullYear(), 0, 26), // Republic Day

                new Date(new Date().getFullYear(), 2, 31), // Holi

                new Date(new Date().getFullYear(), 3, 14), // Tamil New Year/Ugadi

                new Date(new Date().getFullYear(), 4, 1), // Labour Day

                new Date(new Date().getFullYear(), 7, 15), // Independence Day

                new Date(new Date().getFullYear(), 8, 15), // Ganesh Chaturthi

                new Date(new Date().getFullYear(), 8, 17), // Onam

                new Date(new Date().getFullYear(), 10, 7), // Diwali

                new Date(new Date().getFullYear(), 11, 25) // Christmas

            ].map(date => date.toISOString().split('T')[0]);

            if (fromDate && toDate && fromDate <= toDate) {

                let diffDays = 0;

                for (let date = new Date(fromDate); date <= toDate; date.setDate(date.getDate() + 1)) {

                    const formattedDate = date.toISOString().split('T')[0];

                    if (!holidays.includes(formattedDate)) {

                        diffDays++;

                    }

                }

                document.getElementById("DaysOfLeave").value = diffDays;

            } else {

                document.getElementById("DaysOfLeave").value = "";

            }

        }
    </script>
</body>
</html> 